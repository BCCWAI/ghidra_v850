
# (13) Branch instructions
# part of (15) Special instructions


# JMP [reg1]
:jmp [R0004] is op0515=0x003 & R0004 & op0004=31 {
	PC = R0004;
	return [R0004];
}
:jmp [R0004] is op0515=0x003 & R0004 & op0004 != 31 {
	PC = R0004;
	call [R0004];
}

# JR disp32
:jr addr32 is op0015=0x02E0; addr32 {
	PC = addr32;
	goto addr32;
}

# JARL disp32, reg1
:jarl addr32, r0004 is op0515=0x017 & r0004; addr32 {
	r0004 = inst_next;
	PC = addr32;
	call addr32;
}

# DISPOSE imm5, list12
:dispose op0105, list12 is op0615=0x19 & op0105 & op0000; op1620=0 & op2131
[ list12 = (op0000 << 11) | op2131; ] {
	local adr = sp + (op0105 << 2);
	# foreach (all regs in list12)
	# 	reg in list12 = Load-memory (adr, Word)Note
	# 	adr = adr + 4
	TODO();
	sp = adr;
}
# DISPOSE imm5, list12 [reg1]
:dispose op0105, list12 [r1620] is op0615=0x19 & op0105 & op0000; r1620 & op2131
[ list12 = (op0000 << 11) | op2131; ] {
	local adr = sp + (op0105 << 2);
	# foreach (all regs in list12)
	# 	reg in list12 = Load-memory (adr, Word)Note
	# 	adr = adr + 4
	TODO();
	sp = adr;
	PC = r1620;
	return [PC];
}

# JMP disp32[reg1]
:jmp addr32[R0004] is op0515=0x037 & R0004; addr32 {
	local addr = addr32 + R0004;
	goto [addr];
}



# PREPARE list12, imm5
:prepare list12, op0105 is op0615=0x1E & op0105 & op0000; op1620=0x01 & op2131
[ list12 = (op0000 << 11) | op2131; ] {
	local adr = sp;
	TODO();
	# foreach (all regs in list12)
	#	adr = adr - 4;
	#	Store-memory (adr, reg in list12, Word);
	sp = adr - (op0105 << 2);
}
# PREPARE list12, imm5, sp
:prepare list12, op0105, sp is op0615=0x1E & op0105 & op0000; op1620=0x03 & op2131; s3247 & sp
[ list12 = (op0000 << 11) | op2131; ] {
	TODO();
}
# PREPARE list12, imm5, imm16 (low)
:prepare list12, op0105, s3247 is op0615=0x1E & op0105 & op0000; op1620=0x0B & op2131; s3247
[ list12 = (op0000 << 11) | op2131; ] {
	TODO();
}
# PREPARE list12, imm5, imm16 (high)
:prepare list12, op0105, s3247 is op0615=0x1E & op0105 & op0000; op1620=0x13 & op2131; s3247
[ list12 = (op0000 << 11) | op2131; ] {
	TODO();
}
# PREPARE list12, imm5, imm32
:prepare list12, op0105, imm32 is op0615=0x1E & op0105 & op0000; op1620=0x1B & op2131; op3247; op4863
[ list12 = (op0000 << 11) | op2131; 
  imm32 = (op4863 << 16) | op3247; 
] {
	TODO();
}

# JR disp22
:jr disp22 is op0615=0x1E & s0005; op1631 & op1616=0 
[ disp22 = ((s0005 << 16) | op1631) + inst_start; ] {
	local addr:4 = disp22;
	PC = addr;
	call [addr];
}

# JARL disp22, reg2
:jarl disp22, r1115 is op0610=0x1E & s0005 & r1115; op1631 & op1616=0
[ disp22 = ((s0005 << 16) | op1631) + inst_start; ] {
	r1115 = inst_next;
	local addr:4 = disp22;
	PC = addr;
	call [addr];
}


