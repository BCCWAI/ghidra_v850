# sleigh specification file for Renesas v850
#   >> see docs/languages/sleigh.htm or sleigh.pdf for Sleigh syntax

define endian=little;
define alignment=2;

define space ram      type=ram_space      size=4  default;
define space register type=register_space size=4;

# general purpose registers
define register offset=0x00 size=4 
	[ r0 r1 r2 sp gp tp r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 ep lp ];
define register offset=0x00 size=8 
	[ r0r1  r2sp  _     r6r7  r8r9  r10r11  r12r13  r14r15  r16r17  r18r19  r20r21  r22r23  r24r25  r26r27  r28r29  _  ];

# special registers
define register offset=0x80 size=4 [ 
	EIPC EIPSW FEPC FEPSW ECR PSW SCCFG SCBP EIIC FEIC DBIC 
	CTPC CTPSW DBPC DBPSW CTBP DIR EIWR FEWR DBWR BSEL ];

define register offset=0x100 size=4 [ PC ];

@define PSW_PP  "PSW[19,1]"
@define PSW_NPW "PSW[18,1]"
@define PSW_DMP "PSW[17,1]"
@define PSW_IMP "PSW[16,1]"
@define PSW_NP  "PSW[7,1]"
@define PSW_EP  "PSW[6,1]"
@define PSW_ID  "PSW[5,1]"
@define PSW_SAT "PSW[4,1]"
@define PSW_CY  "PSW[3,1]"
@define PSW_OV  "PSW[2,1]"
@define PSW_S   "PSW[1,1]"
@define PSW_Z   "PSW[0,1]"



define pcodeop TODO;


macro ternary(res, cond, avar, bvar) {
	res = (avar * zext(cond != 0)) + (bvar * zext(cond == 0));
}


define token instr(16)
	op0000 = (0,0)
	op0003 = (0,3)
	op0004 = (0,4)
	op0005 = (0,5)
	op0006 = (0,6)
	op0010 = (0,10)
	op0015 = (0,15)
	op0105 = (1,5)
	op0106 = (1,6)
	op0406 = (4,6)
	op0410 = (4,10)
	op0505 = (5,5)
	op0510 = (5,10)
	op0515 = (5,15)
	op0610 = (6,10)
	op0615 = (6,15)
	op0710 = (7,10)
	op1113 = (11,13)
	op1114 = (11,14)
	op1115 = (11,15)
	op1415 = (14,15)
	op1515 = (15,15)
	xR0004 = (0,4)
	xR1115 = (11,15)
	r0004 = (0,4)
	r1115 = (11,15)
	s0003 = (0,3) signed
	s0004 = (0,4) signed
	s0005 = (0,5) signed
	s1115 = (11,15) signed
	SR0004 = (0,4)
;
define token instr2(16)
	op1616 = (0,0)
	op1617 = (0,1)
	op1619 = (0,3)
	op1620 = (0,4)
	op1626 = (0,10)
	op1631 = (0,15)
	op1720 = (1,4)
	op1821 = (2,5)
	op2026 = (4,10)
	op2126 = (5,10)
	op2131 = (5,15)
	op2226 = (6,10)
	op2729 = (11,13)
	op3031 = (14,15)
	r1620 = (0,4)
	xR2731 = (11,15)
	R1620odd = (0,4)
	R2731odd = (0,4)
	s1631 = (0,15) signed
	s1731 = (1,15) signed
	s1821 = (2,5) signed
;
define token instr3(16)
	op3247 = (0,15)
	s3247 = (0,15) signed
;
define token instr4(16)
	op4863 = (0,15);



attach variables [ xR0004 xR1115 xR2731 ] 
	[ r0 r1 r2 sp gp tp r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 ep lp ];
attach variables [ r0004 r1115 r1620 ] 
	[ _  r1 r2 sp gp tp r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 ep lp ];
attach variables [ R1620odd R2731odd ] 
	[ r0r1 _ r2sp _ _ _ r6r7 _ r8r9 _ r10r11 _ r12r13 _ r14r15 _ r16r17 _ r18r19 _ r20r21 _ r22r23 _ r24r25 _ r26r27 _ r28r29 _ _ _ ];

attach variables [ SR0004 ] [
	EIPC EIPSW FEPC FEPSW ECR PSW _ _ _ _ _ SCCFG SCBP EIIC FEIC DBIC 
	CTPC CTPSW DBPC DBPSW CTBP DIR _ _ _ _ _ _ EIWR FEWR DBWR BSEL ];


addr9: rel is op0406 & s1115
[ rel = ((s1115 << 4) | (op0406 << 1)) + inst_start; ] { export *:4 rel; }
# TODO not working!!
# addr22: rel is s0005; op1631 & op1616=0
# [ rel = ((s0005 << 16) | op1631) + inst_start; ] { export *:4 rel; }
addr32: rel is op1631 & op1616=0; op3247
[ rel = ((op3247 << 16) | op1631) + inst_start; ] { export *:4 rel; }



# PSW flags manipulations
macro setZ(res) 	{	$(PSW_Z) = ((res) == 0);	}
macro setS(res) 	{	$(PSW_S) = (((res) & 0x80000000) != 0); }
macro setOV(res)	{	$(PSW_OV) = res;	}
macro clrOV() 		{	$(PSW_OV) = 0;		}
macro set_S_Z(res)	{ setS(res); setZ(res);	}
macro set_nOV_S_Z(res)	{ clrOV(); set_S_Z(res); }
macro set_C(res) 	{	$(PSW_CY) = (res != 0);	}
macro flags_add(op1,op2) {
	local A:4 = op1;		local B:4 = op2;		local R = A + B;
	local sA  = A[31,1];	local sB  = B[31,1];	local sR = R[31,1];
	$(PSW_OV) = (sA == sB) && (sB != sR);
	$(PSW_CY) = carry(A, B);
	set_S_Z (R);
}
macro flags_sub(op1,op2) {
	local A:4 = op1;		local B:4 = op2;		local R = A - B;
	local sA  = A[31,1];	local sB  = B[31,1];	local sR = R[31,1];
	$(PSW_OV) = (sA != sB) && (sB == sR);
	$(PSW_CY) = carry(A, -B);	# check this!
	set_S_Z (R);
}

# read r0 always return zero
R0004: xR0004 is xR0004 {
	local addr:4 = & xR0004;
	xR0004 = xR0004 * zext(addr != 0);
	export xR0004;
}
R1115: xR1115 is xR1115 {
	local addr:4 = & xR1115;
	xR1115 = xR1115 * zext(addr != 0);
	export xR1115;
}
R2731: xR2731 is xR2731 {
	local addr:4 = & xR2731;
	xR2731 = xR2731 * zext(addr != 0);
	export xR2731;
}


@include "v850_arithmetic.sinc"
@include "v850_logical.sinc"
@include "v850_data_manipulation.sinc"
@include "v850_cond.sinc"
@include "v850_func.sinc"
@include "v850_special.sinc"
@include "v850_load_store.sinc"

